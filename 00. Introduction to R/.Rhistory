rep((2,3),5)
rep(3,5)
rep(c(2,3),5)
x=c(2,3)
type(x)
calss(x)
class(x)
tenp=c("zs","er",2)
tenp
setwd("C:/Projects/STAT/01. ZS DS/03. Kpill Promotional Sales Challenge")
setwd("C:/Projects/P99_STAT/10. R Sessions for Onc Pod/00. Introduction to R")
library(dplyr)
library(ggplot2)
data=read.csv('train.csv',sep=",")
colnames(data)
colnames(data)=c("Acc_ID","Month","TRx","Speaker_Programs","Calls","PDE","Emails","Clicks","Samples")
colnames(data)
z=10L
as.numeric(z)
class(z)
z=as.numeric(z)
class(z)
1L/2L
3L/2L
x=3L
y=2L
x/y
as.integer(x/y)
x=3
y=2L
x/y
as.integer(x/y)
library(dplyr)
library(tidyr)
library(stringr)
setwd("C:/Projects/STAT/10. R Sessions for Onc Pod/01. Data Manipulation in R")
data=read.csv('train.csv',sep=',',header=TRUE)
summary(data)
glimpse(data)
str(data)
view(data)
view(data)
select(data,Month,Emails)
select(data,Month,Emails)
head(select(data, Month:Emails, -PDE))
head(data,5)
head(select(data, Month:Clicks, -PDE:Emails))
head(select(data, Month:Clicks, -(PDE:Emails)))
head(select(data, Month:Clicks, -(PDE,Trx)))
head(select(data, Month:Clicks, -PDE,-Trx))
str(data)
data[["TRx","Emails"]]
data["TRx","Emails"]
data=read.csv('train.csv',sep=',',header=TRUE)
data[c("TRx","Emails")]
data[["TRx","Emails"]]
data[c("TRx","Emails")]
data[,c("TRx","Emails")]
data[:,c("TRx","Emails")]
data[:,[c(]"TRx","Emails"]]
######################################################################################################
# SELECT: Selecting columns
######################################################################################################
#Using columns name
select(data,Month,Emails)
head(select(data, Month:Clicks, -(PDE:Emails)))
#Using columns indicies
colnames(data)
colnames(select(data, 1:4,-2))
#Helpers for select()
#columns starting with
head(select(data, starts_with("clicks",ignore.case = FALSE)),5)
head(select(data, starts_with("clicks",ignore.case = TRUE)),5)
#columns ending with
head(select(data, ends_with("rx")),5)
#columns containing with
head(select(data, -ends_with("rx")),5)
#columns matching with
head(select(data, matches('rx|mails')),5)
#columns from a given list
temp=c('Emails' ,'Trx')
head(select(data, one_of(temp)),5)
#columns based on data type
head(select_if(data,is.numeric),5)
#columns based on data type
head(select_all(data, toupper),5)
######################################################################################################
# MUTATE: Creating additonal columns from existing data
######################################################################################################
#simple addtion operation to create a new column
head(mutate(data, direct_promo=Calls+PDE),5)
#calculating difference from averaage of the column
head(mutate(data, calls_diff_avg=Calls-mean(Calls)),5)
#map in text values
month_abb=month.abb
month_abb
head(mutate(data, MOnth_text=month_abb[Month]))
#create custom flags using ifelse
head(mutate(data, High_Calls_Flag=ifelse(Calls>mean(Calls),1,0)))
#create custom flags using multiple conditonal statements
head(mutate(mtcars,call_segment =case_when( mpg>20 ~ 'HIGH', mpg > 10 ~ 'MEDIUM', TRUE ~ 'LOW')),5)
#recoding values in a column
head(mutate(data,month_name=recode(Month,"1" ="January",.default="other")))
#merging columns in R
con_data=unite(data,temp, Calls,PDE, sep=":")
head(con_data)
#spliting columns in R
split_data=separate(con_data,temp,into=c("col1","col2"),sep=":")
head(split_data)
######################################################################################################
# FILTER: Creating additonal columns from existing data
######################################################################################################
#conditonal filtering of rows
head(filter(data,Month==1))
#conditonal filtering of rows
head(filter(data,Month==1 & Account=="A1B012"),5)
#rows containing certain values
head(filter(data, Account %in% c("A1B012", "A1B011")),5)
#rows not containing certain values
filter(data, !Account %in% c("A1B012", "A1B012"))
#rows containing a specific string
head(filter(data,str_detect(Account, pattern = "A11B")),5)
#filtering rows using logic gates
head(filter(data,xor(Calls > 100, PDE > 15)),5)
#filtering empty rows
head(filter(data,!is.na(Emails)),5)
######################################################################################################
# ARRANGE: Rearrange rows
######################################################################################################
#arranging rows by columns
head(arrange(data, Calls))
#arranging rows by columns
head(arrange(data, desc(Trx)))
#arranging rows by columns
head(arrange(data, desc(Trx), Speaker.Programs))
#Random n samples of data
sample_n(data, 5)
#Random nth fraction  samples of data
sample_frac(data, 0.0009)
#Random nth fraction  samples of data
head(data,5)
group_by(data, Account)
data[:,c("TRx","Emails")]
head(data,5)
data[,c('TRx','Emails')]
data[,'Emails']
data[,c('Emails','Clicks']
######################################################################################################
# SELECT: Selecting columns
######################################################################################################
#Using columns name
select(data,Month,Emails)
head(select(data, Month:Clicks, -(PDE:Emails)))
#Using columns indicies
colnames(data)
colnames(select(data, 1:4,-2))
#Helpers for select()
#columns starting with
head(select(data, starts_with("clicks",ignore.case = FALSE)),5)
head(select(data, starts_with("clicks",ignore.case = TRUE)),5)
#columns ending with
head(select(data, ends_with("rx")),5)
#columns containing with
head(select(data, -ends_with("rx")),5)
#columns matching with
head(select(data, matches('rx|mails')),5)
#columns from a given list
temp=c('Emails' ,'Trx')
head(select(data, one_of(temp)),5)
#columns based on data type
head(select_if(data,is.numeric),5)
#columns based on data type
head(select_all(data, toupper),5)
######################################################################################################
# MUTATE: Creating additonal columns from existing data
######################################################################################################
#simple addtion operation to create a new column
head(mutate(data, direct_promo=Calls+PDE),5)
#calculating difference from averaage of the column
head(mutate(data, calls_diff_avg=Calls-mean(Calls)),5)
#map in text values
month_abb=month.abb
month_abb
head(mutate(data, MOnth_text=month_abb[Month]))
#create custom flags using ifelse
head(mutate(data, High_Calls_Flag=ifelse(Calls>mean(Calls),1,0)))
#create custom flags using multiple conditonal statements
head(mutate(mtcars,call_segment =case_when( mpg>20 ~ 'HIGH', mpg > 10 ~ 'MEDIUM', TRUE ~ 'LOW')),5)
#recoding values in a column
head(mutate(data,month_name=recode(Month,"1" ="January",.default="other")))
#merging columns in R
con_data=unite(data,temp, Calls,PDE, sep=":")
head(con_data)
#spliting columns in R
split_data=separate(con_data,temp,into=c("col1","col2"),sep=":")
head(split_data)
######################################################################################################
# FILTER: Creating additonal columns from existing data
######################################################################################################
#conditonal filtering of rows
head(filter(data,Month==1))
#conditonal filtering of rows
head(filter(data,Month==1 & Account=="A1B012"),5)
#rows containing certain values
head(filter(data, Account %in% c("A1B012", "A1B011")),5)
#rows not containing certain values
filter(data, !Account %in% c("A1B012", "A1B012"))
#rows containing a specific string
head(filter(data,str_detect(Account, pattern = "A11B")),5)
#filtering rows using logic gates
head(filter(data,xor(Calls > 100, PDE > 15)),5)
#filtering empty rows
head(filter(data,!is.na(Emails)),5)
######################################################################################################
# ARRANGE: Rearrange rows
######################################################################################################
#arranging rows by columns
head(arrange(data, Calls))
#arranging rows by columns
head(arrange(data, desc(Trx)))
#arranging rows by columns
head(arrange(data, desc(Trx), Speaker.Programs))
#Random n samples of data
sample_n(data, 5)
#Random nth fraction  samples of data
sample_frac(data, 0.0009)
#Random nth fraction  samples of data
head(data,5)
group_by(data, Account)
#Top n rows of the data
top_n(data,7)
######################################################################################################
# Summarise: Summarising data
######################################################################################################
#Summarise data by column
summarise(data,x=mean(PDE),y=max(PDE))
#Summarise data by column
summarise(data,average_PDE=mean(PDE),average_Calls=mean(Calls),average_emails=mean(Emails))
#Summarise data by column
data1=subset(data,select=Month:Samples)
summarise_all(data1,max,na.rm=TRUE)
#Summarise data by based on data types
summarise_if(data,is.numeric,max,na.rm=TRUE)
#Summarise data by based on data types
group_by(data,Account)%>%summarise(average_calls=mean(Calls))
#Summarise data by on specific levels using group_by and pipe operator
group_by(data,Account)%>%summarise_if(is.numeric,mean,na.rm=TRUE)
data[,c('Emails','Clicks')]
data[1:5,c('Emails','Clicks')]
getwd()
writeClipboard(str,format=1)
setwd("C:/Projects/P99_STAT/10. R Sessions for Onc Pod/00. Introduction to R")
library(dplyr)
library(ggplot2)
data=read.csv('train.csv',sep=",")
View(data)
library(dplyr)
library(tidyr)
library(stringr)
setwd("C:/Projects/STAT/10. R Sessions for Onc Pod/01. Data Manipulation in R")
setwd("C:/Projects/P99_STAT/10. R Sessions for Onc Pod/00. Introduction to R")
getwd()
data=read.csv('train.csv',sep=',',header=TRUE)
str(data)
head(data,5)
tail(data,5)
summary(data)
glimpse(data)
select(data,Month,Emails)
head(select(data, Month:Clicks, -(PDE:Emails)),5)
colnames(data)
colnames(data)
colnames(data)[4]="SP"
colnames(data)
colnames(data)
write.csv(data,"temp1.csv")
head(select(data, starts_with("clic",ignore.case = FALSE)),5)
head(select(data, starts_with("clic",ignore.case = TRUE)),5)
source('C:/Projects/P99_STAT/10. R Sessions for Onc Pod/01. Data Manipulation in R/Onc Pod R Trainings Data Manipulation in R.R')
head(select(data, starts_with("clic",ignore.case = FALSE)),5)
head(select(data, starts_with("clic",ignore.case = TRUE)),5)
head(select(data, ends_with("rx")),5)
head(select(data, matches('rx|mails')),5)
head(select(data, one_of(temp)),5)
head(select_if(data,is.numeric),5)
head(select_all(data, toupper),5)
head(mutate(data, direct_promo=Calls+PDE),5)
head(mutate(data, calls_diff_avg=Calls-mean(Calls)),5)
month_abb=month.abb
month_abb
head(mutate(data, MOnth_text=month_abb[Month]))
head(mutate(data, High_Calls_Flag=ifelse(Calls>mean(Calls),1,0)))
head(mtcars,5)
head(mutate(mtcars,call_segment =case_when( mpg>20 ~ 'HIGH', mpg > 10 ~ 'MEDIUM', TRUE ~ 'LOW')),5)
head(mutate(data,month_name=recode(Month,"1" ="January",.default="other")))
con_data=unite(data,temp, Calls,PDE, sep=":")
head(con_data)
split_data=separate(con_data,temp,into=c("col1","col2"),sep=":")
head(split_data)
head(filter(data,Month==1))
head(filter(data,Month==1 & Account=="A1B012"),5)
head(filter(data, Account %in% c("A1B012", "A1B011")),5)
head(filter(data, Account %in% c("A1B012", "A1B011")),20)
filter(data, Account %in% c("A1B012", "A1B011"))
filter(data, Account %in% c("A1B012", "A1B013"))
head(data,)
data$Account
filter(data, Account %in% c("A1B012", "A2B012"))
filter(data, !Account %in% c("A1B012", "A1B012"))
head(filter(data,str_detect(Account, pattern = "A11B")),5)
head(filter(data,str_detect(Account, pattern = "11B0")),5)
head(filter(data,xor(Calls > 100, PDE > 15)),5)
head(filter(data,!is.na(Emails)),5)
head(filter(data,is.na(Emails)),5)
head(arrange(data, Calls))
head(arrange(data, desc(Trx)))
head(arrange(data, desc(Trx), SP))
sample_n(data, 5)
sample_frac(data, 0.0009)
group_by(data, Account)
summarise(data,x=mean(PDE),y=max(PDE))
summarise(data,average_PDE=mean(PDE),average_Calls=mean(Calls),average_emails=mean(Emails))
data1=subset(data,select=Month:Samples)
summarise_all(data1,max,na.rm=TRUE)
summarise_if(data,is.numeric,max,na.rm=TRUE)
group_by(data,Account)%>%summarise(average_calls=mean(Calls))
group_by(data,Account)%>%summarise_if(is.numeric,mean,na.rm=TRUE)
